"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9+9kf8(5vrl88^0m0ijqbco768$(i!0(=%^keo^#o-uhsk&byf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['0.0.0.0', '127.0.0.1',]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.gis',
    'django.contrib.staticfiles', # required for graphql
    'django.contrib.sites', # needed for django-allauth

    # 3rd Party
    'rest_framework',
    'rest_framework_gis',
    # This comes with the rest framework. This generates JWT tokens on the server for users
    'rest_framework.authtoken',

    'allauth', # part of django-allauth
    'allauth.account', # part of django-allauth
    'allauth.socialaccount', # part of django-allauth
    'corsheaders', # controls which http headers are allowed to access the API
    #'graphene-django',
    # add graphene-django after importing somewhere else:
    # https://stackoverflow.com/questions/62598963/modulenotfounderror-no-module-named-graphene-django
    'dj_rest_auth', # responsible for login, logout, and authentication endpoints
    'dj_rest_auth.registration', # needed for django-allauth
    'graphene_django', # graphql
    'graphene_gis',
    'drf_yasg', # API documentation

    # local
    'accounts.apps.AccountsConfig',

]


GRAPHENE = {
    'SCHEMA': 'config.schema.schema' # Where your Graphene schema lives
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
        # only authenticated users have access to the API
        #'rest_framework.permissions.IsAuthenticated',
    ],
    #'DEFAULT_AUTHENTICATION_CLASSES': [
        # temporary while I figure out apollo
     #   'rest_framework.authentication.BasicAuthentication',
        # Sessions are used to power the Browsable API and the ability to log in and log out of it.
        # 'rest_framework.authentication.SessionAuthentication',
        # TokenAuthentication is stored on the user's browser in the form of a cookie or other data
        # 'rest_framework.authentication.TokenAuthentication',
    #], 
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'taliyah',
        'HOST': 'db',
        'PORT': '5432',
    }
}

"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# https://stackoverflow.com/questions/49189402/auth-user-groups-fields-e304-reverse-accessor-for-user-groups-clashes-with
AUTH_USER_MODEL = 'accounts.CustomUser'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    'http://localhost:3000',
    'http://localhost:8000',
)

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # part of django-allauth
# this will email the console so that we don't need to set up an email server just yet
SITE_ID = 1 # part of django-allauth
# it's possible to host multiple websites from the same django project, which is pretty interesting...
# therefore we need specify this site's ID as is required by the django-allauth

